// Generated by CoffeeScript 1.9.2
requirejs.config({
  paths: {
    'angular': '../build/lib/angular-route-animate.min',
    'jquery': '../build/lib/jquery.min',
    'bootstrap': '../build/lib/bootstrap.min'
  },
  shim: {
    'angular': {
      exports: 'angular'
    },
    'bootstrap': {
      deps: ['jquery'],
      exports: 'bootstrap'
    }
  }
});

requirejs(['jquery', 'angular', 'bootstrap'], function($, angular) {

  /*skel配置项
  skelparam = 
      containers: 1140
      breakpoints:
          medium: 
              media: '(min-width: 769px) and (max-width: 1200px)'
              containers: '90%'
          small:
              media: '(max-width: 768px)'
              containers: '95%'
      
  skel.init skelparam
   */
  var app, filterType, parseList, parsePost, parseTitle, parseType;
  angular.element(document).ready(function() {
    return setTimeout(function() {
      return angular.bootstrap(document, ['myblog']);
    });
  });
  app = angular.module('myblog', ["ngRoute", "ngAnimate"]);
  app.config([
    '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
      return $routeProvider.when("/", {
        templateUrl: '/template/page-main.html'
      }).when("/cv", {
        templateUrl: '/template/page-cv.html'
      }).when("/contact", {
        templateUrl: '/template/page-msg.html'
      }).when("/project", {
        templateUrl: '/template/page-project.html'
      }).when("/blog/:type", {
        templateUrl: '/template/page-blog.html'
      }).when("/blog", {
        templateUrl: '/template/page-blog.html'
      }).otherwise({
        redirectTo: "/"
      });
    }
  ]);
  app.factory('AuthService', [
    '$http', function($http) {
      var fn;
      fn = {};
      return {};
    }
  ]);
  filterType = function(data, param) {
    var i, j, len, output, type;
    if (param) {
      type = param;
    }
    if (type && data && type !== 'all') {
      output = [];
      for (j = 0, len = data.length; j < len; j++) {
        i = data[j];
        if (i.type === type) {
          output.push(i);
        }
      }
      return output;
    }
    return data;
  };
  app.filter('blogListType', function() {
    var blogListType;
    return blogListType = filterType;
  });
  app.directive('celAnimate', function() {
    return {
      restrict: 'EA',
      link: function(scope, element, attrs) {
        return $(window).scroll(function() {
          var height, pos, top;
          height = $(window).height();
          top = $(window).scrollTop();
          pos = element.offset().top;
          if (pos - top <= height) {
            return element.addClass('cel-show');
          }
        });
      }
    };
  });
  app.directive('cover', function() {
    return {
      restrict: 'EA',
      link: function(scope, element, attrs) {
        var cover;
        cover = function() {
          var eh, ew, wh, ww;
          element = $(element);
          ew = element.width();
          ww = $(window).width();
          eh = element.height();
          wh = $(window).height();
          element.css('min-width', wh * ew / eh + 'px');
          if (wh === eh) {
            return element.css('left', '-' + (ew - ww) / 2 + 'px');
          } else {
            return element.css('left', 0);
          }
        };
        cover();
        return window.onresize = function() {
          return cover();
        };
      }
    };
  });
  app.directive('changeFont', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var fonts, i, task;
        fonts = ['cursive', '-webkit-body', '-webkit-pictograph', 'fantasy', 'serif'];
        i = 0;
        task = {};
        return $(element).hover(function() {
          var that, title;
          that = this;
          title = $('.navbar-brand');
          return task.now = setInterval($.proxy(function() {
            $(title).css('font-family', fonts[i]);
            $(that).css('font-family', fonts[i]);
            if (++i >= 5) {
              return i = 0;
            }
          }), 200);
        }, function() {
          return clearInterval(task.now);
        });
      }
    };
  });
  app.directive('drag', function() {
    return {
      restrict: 'EA',
      link: function(scope, element, attrs) {
        var moveDrag;
        element = $(element);
        moveDrag = function() {
          var X, Y, start;
          start = 0;
          X = 0;
          Y = 0;
          return element.mousedown(function(event) {
            console.log(X);
            start = 1;
            X = event.clientX;
            Y = event.clientY;
            $('body').mousemove(function(eve) {
              var theX;
              console.log('start2' + start);
              if (start) {
                theX = eve.clientX - X;
                X = eve.clientX;
                element.parent().css('left', '+=' + theX + 'px');
                $('.bk-left').css('width', '+=' + theX + 'px');
                return $('.bk-right').css('left', '+=' + theX + 'px');
              }
            });
            return $('body').mouseup(function() {
              if (start === 1) {
                start = 0;
                $('body').unbind('mousemove');
                return $('body').unbind('mouseup');
              }
            });
          });
        };
        return moveDrag();
      }
    };
  });
  app.directive('showDetail', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        var $target;
        $target = $('.bk-' + attrs.showDetail);
        return $(element).hover(function() {
          if ($(window).width() > 768) {
            $target.addClass('active');
            return $('.round').not($(this)).addClass('fadeout');
          }
        }, function() {
          if ($(window).width() > 768) {
            $target.removeClass('active');
            return $('.round').not($(this)).removeClass('fadeout');
          }
        });
      }
    };
  });
  app.directive('vgGo', function() {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        return $(element).click(function() {
          return window.location.href = attrs.vgGo;
        });
      }
    };
  });
  parseTitle = function(data) {
    var j, key, len, line, month, r, ref, ref1, value;
    r = {
      title: "",
      type: "",
      tag: "",
      disc: "",
      url: "",
      hide: ""
    };
    month = '零 一 二 三 四 五 六 七 八 九 十 十一 十二'.split(' ');
    ref = data.split('\n');
    for (j = 0, len = ref.length; j < len; j++) {
      line = ref[j];
      ref1 = line.split(':'), key = ref1[0], value = ref1[1];
      key = $.trim(key);
      value = $.trim(value);
      if (r.hasOwnProperty(key)) {
        r[key] = value;
      }
    }
    r.date = r.url.split('-');
    r.date.month = month[parseInt(r.date[1], 10)];
    r.date.day = parseInt(r.date[2], 10);
    return r;
  };
  parseList = function(data) {
    var r;
    r = [];
    data = data.split(/\n[\-=]+/);
    data.forEach(function(list) {
      list = parseTitle(list);
      if (list.hide !== 'true') {
        return r.push(list);
      }
    });
    return r;
  };
  parseType = function(data) {
    var r;
    r = [];
    data.forEach(function(list) {
      if (r.indexOf(list.type) === -1) {
        return r.push(list.type);
      }
    });
    return r;
  };
  parsePost = function(text) {
    var flag, head, j, len, line, post, ref, tail;
    flag = false;
    head = "";
    tail = "";
    ref = text.split('\n');
    for (j = 0, len = ref.length; j < len; j++) {
      line = ref[j];
      if (/[\-=]+/.test(line)) {
        flag = true;
      }
      if (flag) {
        tail += '\n' + line;
      } else {
        head += '\n' + line + '\n';
      }
    }
    post = parseTitle(head);
    post.text = tail;
    if (post.hide === 'true') {
      return;
    }
    return post;
  };
  return app.controller('blogList', [
    '$scope', '$http', '$routeParams', '$rootScope', '$timeout', '$location', function($scope, $http, $routeParams, $rootScope, $timeout, $location) {
      $scope.routeType = $routeParams.type || 'all';
      $http.get("/post/list.md").success(function(data) {
        $scope.blogList = $scope.blogListOrigin = parseList(data);
        return $scope.listType = parseType($scope.blogList);
      });
      return $scope.changeType = function($event, type) {
        $event.preventDefault();
        $scope.routeType = type;
        return $scope.blogList = filterType($scope.blogListOrigin, type);
      };
    }
  ]);
});

//# sourceMappingURL=main.js.map
