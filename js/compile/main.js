// Generated by CoffeeScript 1.9.2
requirejs.config({
  paths: {
    "angular": '../build/lib/angular-route-animate.min',
    "jquery": '../build/lib/jquery.min',
    "skel": '../build/lib/skel.min'
  },
  shim: {
    "angular": {
      exports: "angular"
    },
    "skel": {
      exports: 'skel'
    }
  }
});

requirejs(['jquery', 'angular', 'skel'], function($, angular, skel) {
  var app;
  skel.init({
    containers: 1140,
    breakpoints: {
      medium: {
        media: '(min-width: 769px) and (max-width: 1200px)',
        containers: '90%'
      },
      small: {
        media: '(max-width: 768px)',
        containers: '95%'
      }
    }
  });
  angular.element(document).ready(function() {
    return setTimeout(function() {
      return angular.bootstrap(document, ['myblog']);
    });
  });
  app = angular.module('myblog', ["ngRoute", "ngAnimate"]);
  app.config([
    '$routeProvider', '$locationProvider', function($routeProvider, $locationProvider) {
      return $routeProvider.when("/", {
        templateUrl: '/template/page-main.html'
      }).when("/cv", {
        templateUrl: '/template/page-cv.html'
      }).when("/contact", {
        templateUrl: '/template/page-msg.html'
      }).when("/project", {
        templateUrl: '/template/page-project.html'
      }).otherwise({
        redirectTo: "/"
      });
    }
  ]);
  app.directive('cover', function() {
    return {
      restrict: 'EA',
      link: function(scope, element, attrs) {
        var cover;
        cover = function() {
          var eh, ew, wh, ww;
          element = $(element);
          ew = element.width();
          ww = $(window).width();
          eh = element.height();
          wh = $(window).height();
          element.css('min-width', wh * ew / eh + 'px');
          if (wh === eh) {
            return element.css('left', '-' + (ew - ww) / 2 + 'px');
          } else {
            return element.css('left', 0);
          }
        };
        cover();
        return window.onresize = function() {
          return cover();
        };
      }
    };
  });
  app.directive('drag', function() {
    return {
      restrict: 'EA',
      link: function(scope, element, attrs) {
        var moveDrag;
        element = $(element);
        moveDrag = function() {
          var X, Y, start;
          start = 0;
          X = 0;
          Y = 0;
          return element.mousedown(function(event) {
            console.log(X);
            start = 1;
            X = event.clientX;
            Y = event.clientY;
            $('body').mousemove(function(eve) {
              var theX;
              console.log('start2' + start);
              if (start) {
                theX = eve.clientX - X;
                X = eve.clientX;
                element.parent().css('left', '+=' + theX + 'px');
                $('.bk-left').css('width', '+=' + theX + 'px');
                return $('.bk-right').css('left', '+=' + theX + 'px');
              }
            });
            return $('body').mouseup(function() {
              if (start === 1) {
                start = 0;
                $('body').unbind('mousemove');
                return $('body').unbind('mouseup');
              }
            });
          });
        };
        return moveDrag();
      }
    };
  });
  return app.controller('mainCtrl', [
    '$scope', '$http', '$routeParams', function($scope, $http, $routeParams) {
      var xxx;
      return xxx = 'x';
    }
  ]);
});

//# sourceMappingURL=main.js.map
